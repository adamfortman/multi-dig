#!/bin/bash
tabs -4

custom_nameservers="Level3 209.244.0.3 209.244.0.4\n\
Verisign 64.6.64.6 64.6.65.6\n\
Google 8.8.8.8 8.8.4.4\n\
Comodo_Secure_DNS 8.26.56.26 8.20.247.20\n\
Norton_ConnectSafe 199.85.126.10 199.85.127.10\n\
Dyn 216.146.35.35 216.146.36.36\n\
Cloudflare 1.1.1.1 1.0.0.1"


digall() {
	# loop through the requested record types and perform lookups
	for r in ${record}; do
		# DKIM is special, so take that into account now and during output
		if [[ $r == 'TXT' ]]; then
			dkimresults=$(dig +time=2 +tries=1 +noall +answer $r @$1 default._domainkey.$domain)
		fi
		# minimize amount of time spent perform dns lookups
		# if time out is received, print it
		results=$(dig +time=2 +tries=1 +noall +answer $r @$1 $domain)
		if [[ $results =~ 'connection timed out' ]]; then
			printf "\e[1;35mFAILED TO RETRIEVE ${r} RECORD WITHIN TIMEOUT\e[0m\n"
		elif [[ ! -z $results ]]; then
			# color coded record type output
			case $r in
				A)
					printf "\e[0;32m${results}\e[0m\n"
					;;
				AAAA)
					printf "\e[0;32m${results}\e[0m\n"
					;;
				MX)
					printf "\e[0;31m${results}\e[0m\n"
					;;
				TXT)
					printf "\e[0;34m${results}\e[0m\n"
					if [[ $dkimresults =~ 'connection timed out' ]]; then
			            printf "\e[1;35mFAILED TO RETRIEVE ${r} RECORD WITHIN TIMEOUT\e[0m\n"
					elif [[ ! -z $dkimresults ]]; then
						printf "\e[0;34m${dkimresults}\e[0m\n"
					fi
					;;
				NS)
					printf "\e[0;36m${results}\e[0m\n"
					;;
				CNAME)
					printf "\e[0;35m${results}\e[0m\n"
					;;
				*)
					printf "\e[0;33m${results}\e[0m\n"
					;;
	        esac
		fi
	done
echo
}

resolve_auth_ns() {
	# Generate random root-server
	sub=$(openssl rand -hex 4 | tr -dc 'a-m' | head -c 1)
	while [[ -z $sub ]]; do
		sub=$(openssl rand -hex 4 | tr -dc 'a-m' | head -c 1)
	done
	rootns="${sub}.root-servers.net"

	# Get tld authoritative NS
	tldns=$(dig +time=2 +tries=1 +noall +authority @$rootns $domain | awk '$4 == "NS" {print$NF}')

	# Check for domain against tld's authoritative NS
	# If found, set and break out of loop
	# There is a second check to account for country
	# tlds that require a second lookup
	for ns in $tldns; do
		results=$(dig +time=2 +tries=1 +noall +authority @$ns $domain | awk '$4 == "NS" {print$NF}')
		if [[ ! -z "$results" ]]; then
			for ns2 in $results; do
				if [[ -z $(echo "$tldns" | grep "$ns2") ]]; then
					nsfound=1
					break 2
				fi
			done
		fi
	done

	if [[ $nsfound -ne 1 ]]; then
		echo "No auth NS found for $domain"
		exit 11
	fi

	for ns in $results; do
		result=$(dig +time=2 +tries=1 +short $ns)
		if [[ $result ]]; then
			for res in $result; do
				if [[ -z $nslist ]]; then
					nslist="$ns $res"
				else nslist="$ns $res\n$nslist"
				fi
			done
		elif [[ -z $nslist ]]; then
			nslist="$ns ${result:-none}"
		else 
			nslist="$ns ${result:-none}\n$nslist"
		fi
	done

	if [[ -z $nslist ]]; then
		echo "Could not resolve auth NS for $domain"
		exit 12
	fi

	# If auth nameservers were found, try to resolve them
	# from a public nameserver
#	if [[ ! -z $domainauthns ]]; then
#		for authns in $domainauthns; do
#			authnsip=$(dig +time=2 +tries=1 +short $authns @8.8.8.8)
#			# if can resolve authns, create/append to nslist
#			# else inform that an ns couldn't be resolved
#			if [[ ! -z $authnsip ]]; then
#				if [[ ! -z $nslist ]]; then
#					nslist="$authns $authnsip\n$nslist"
#				else
#					nslist="$authns $authnsip"
#				fi
#			else
#				echo "Unable to resolve $authns"
#				resolve_fail=$((resolve_fail+1))
#			fi
#		done
#		if [[ $resolve_fail -gt 0 ]]; then
#			exit 16
#		fi
#	else
#		echo "No auth NS found for $domain"
#		exit 11
#	fi
}

print_help() {
	# print the helps
	echo -e "Usage: $0 <options> <record(s)> <domain>\n
Options:
	-h|--help	- prints this message
	--all		- check against authoritative, custom, and local resolvers
	-a|--auth	- check against authoritative resolver list (default)
	-c|--custom	- check against custom public resolver list only
	-l|--local	- check against local resolvers found in /etc/resolv.conf
	--noh		- do not print report headers
	--nsinfo	- print the authoritative nameservers and their IP addresses\n"
	exit 1
}

custom_list() {
	# check for dns records from custom nameserver list
	if [[ ! -z $custom_nameservers ]]; then
		if [[ $noh -ne 1 ]]; then
			echo -e "===Custom nameserver list===\n"
		fi
		while read provider primary secondary; do
			for ip in $primary $secondary; do
				printf "\e[01;32mresults from $provider [ $ip ]\e[0m\n"
				digall $ip | sed -r 's/^/\t/g'
			done
		done < <(echo -e "$custom_nameservers")
	else
		echo "No custom nameserver list defined"
	fi
}

auth() {
	# check for dns records from authoritative nameservers
	if [[ ! -z $nslist ]]; then
		if [[ $noh -ne 1 ]]; then
			echo -e "===Authoritative nameservers===\n"
		fi
		while read provider ip; do
			if [[ $ip != "none" ]]; then
				printf "\e[01;32mresults from $provider [ $ip ]\e[0m\n"
				digall $ip | sed -r 's/^/\t/g'
			else
				printf "\e[01;32mcouldn't resolve $provider\e[0m\n"
				echo ""
			fi
		done < <(echo -e "$nslist")
	else
		echo "If you get this message, something happened with \$nslist between populating the variable and now. The script probably needs debugging if you got here. No nameserver list should have exited earlier."
	fi
}

local_resolve() {
	# check for dns records from local resolvers
	local_ns=$(awk '/^nameserver/ {print$2}' /etc/resolv.conf)
	if [[ ! -z $local_ns ]]; then
		if [[ $noh -ne 1 ]]; then
			echo -e "===Local resolvers===\n"
		fi
		for ns in $local_ns; do
			printf "\e[01;32mresults from local resolver [ $ns ]\e[0m\n"
			digall $ns | sed -r 's/^/\t/g'
		done
	else
		echo "No nameservers found in /etc/resolv.conf"
	fi
}
check_exist() {
	# in short, this checks to see if the variable is already set.
	# if not, assign it.
	# the first argument is the name of the variable we want to check.
	# using local, we're effectively setting the value of 'to_check'
	# to the value of the actual variable we're checking.
	local -n to_check="$1"
	value="$2"
	# if a variable is not empty and is not "record", return. we only
	# want to be able to set multiple records to check. otherwise,
	# set the variables accordingly.
    if [[ ! -z $to_check && ${!to_check} != "record" ]]; then
		return
	elif [[ ${!to_check} == "record" ]]; then
		record="${record} ${value^^}"
	else
		export "${!to_check}=${value}"
    fi
}

while (( "$#" )); do
	case ${1,,} in
		--noh)
			check_exist noh 1
			;;
		--nsinfo)
			check_exist ns_info 1
			;;
		--all)
			check_exist which_ns all
			;;
		-a|--auth)
			check_exist which_ns auth
			;;
		-c|--custom)
			check_exist which_ns custom
			;;
		-l|--local)
			check_exist which_ns local
			;;
		-h|--help)
			print_help
			;;
		soa)
			check_exist record $1
			;;
		a)
			check_exist record $1
			;;
		aaaa)
			check_exist record $1
			;;
		caa)
			check_exist record $1
			;;
		mx)
			check_exist record $1
			;;
		ns)
			check_exist record $1
			;;
		txt)
			check_exist record $1
			;;
		cname)
			check_exist record $1
			;;
		*.*)
			check_exist domain $1
			;;
		*)
			echo "\"$1\" is not a valid parameter"
			;;
	esac
shift
done

# can't do lookups without a domain
if [[ -z $domain ]]; then
	echo "No domain found in arguments"
	print_help
fi

# if no records were specified, request them all!
if [[ -z $record ]]; then
	record="SOA A AAAA CAA MX NS TXT"
fi

# get authoritative nameservers
if [[ $which_ns == "all" || $which_ns == "auth" || -z $which_ns ]]; then
	resolve_auth_ns
fi

# print ns report of domain, bit nicer than trying to `whois | egrep -i 'name ?server'`
# so many different ways they could be listed and sometime's not even on the same line!
if [[ $ns_info ]]; then
	if [[ $noh -ne 1 ]]; then
		echo -e "===Authoritative nameserver report===\n"
	fi
	while read provider ip; do
		echo "$provider [$ip]"
	done < <(echo -e "$nslist") | column -t
	exit
fi

if [[ $which_ns == "all" ]]; then
	auth
	custom_list
	local_resolve
elif [[ $which_ns == "auth" ]]; then
	auth
elif [[ $which_ns == "custom" ]]; then
	custom_list
elif [[ $which_ns == "local" ]]; then
	local_resolve
else
	auth
fi
