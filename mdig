#!/bin/bash

nameservers="Level3 209.244.0.3 209.244.0.4\n\
Verisign 64.6.64.6 64.6.65.6\n\
Google 8.8.8.8 8.8.4.4\n\
Comodo_Secure_DNS 8.26.56.26 8.20.247.20\n\
Norton_ConnectSafe 199.85.126.10 199.85.127.10\n\
Dyn 216.146.35.35 216.146.36.36\n\
Cloudflare 1.1.1.1 1.0.0.1"


digall() {
	for r in ${record}; do
		if [[ $r == 'TXT' ]]; then
			dkimresults=$(dig +time=2 +tries=1 +noall +answer $r @$1 default._domainkey.$domain)
		fi
		results=$(dig +time=2 +tries=1 +noall +answer $r @$1 $domain)
		if [[ $results =~ 'connection timed out' ]]; then
			printf "\e[1;35mFAILED TO RETRIEVE ${r} RECORD WITHIN TIMEOUT\e[0m\n"
		elif [[ ! -z $results ]]; then
			case $r in
				A)
					printf "\e[0;32m${results}\e[0m\n"
					;;
				AAAA)
					printf "\e[0;32m${results}\e[0m\n"
					;;
				MX)
					printf "\e[0;31m${results}\e[0m\n"
					;;
				TXT)
					printf "\e[0;34m${results}\e[0m\n"
					if [[ $dkimresults =~ 'connection timed out' ]]; then
			            printf "\e[1;35mFAILED TO RETRIEVE ${r} RECORD WITHIN TIMEOUT\e[0m\n"
					else
						printf "\e[0;34m${dkimresults}\e[0m\n"
					fi
					;;
				NS)
					printf "\e[0;36m${results}\e[0m\n"
					;;
				CNAME)
					printf "\e[0;35m${results}\e[0m\n"
					;;
				*)
					printf "\e[0;33m${results}\e[0m\n"
					;;
	        esac
		fi
	done
}

resolve_auth_ns() {
	# Generate random root-server
	sub=$(openssl rand -hex 4 | tr -dc 'a-m' | head -c 1)
	while [[ -z $sub ]]; do
		sub=$(openssl rand -hex 4 | tr -dc 'a-m' | head -c 1)
	done
	rootns="${sub}.root-servers.net"

	# Get tld authoritative NS
	domainrootns=$(dig +time=2 +tries=1 +noall +authority @$rootns $domain | awk '{print$5}')

	# Check for domain against tld's authoritative NS
	# If found, set the domain's auth NS accordingly
	# break out of loop
	for ns in $domainrootns; do
		results=$(dig +time=2 +tries=1 +noall +authority @$ns $domain)
		if [[ ! -z $(echo "$results" | awk '$4 == "NS" {print$4}') ]]; then
			domainauthns=$(echo -e "$results" | awk '{print$5}')
			break
		fi
	done

	# If the parameter is not empty, get the IP address
	# for each NS
	if [[ ! -z $domainauthns ]]; then
		for authns in $domainauthns; do
			authnsip=$(dig +time=2 +tries=1 +short $authns|head -n1)
			if [[ ! -z $authnsip ]]; then
				if [[ ! -z $nslist ]]; then
					nslist="$authns $authnsip\n$nslist"
				else
					nslist="$authns $authnsip"
				fi
			fi
		done
	else
		echo "No auth NS found for $domain"
		exit 1
	fi
}

how2() {
	echo -e "Usage: $0 <option> <domain>\n
Options:
	-h|--how2 - prints this message
	-b - check against authoritative and custom public nameserver list
	-c - check against custom public nameserver list only\n
Notes:
	* defaults to checking authoritative only\n"
	exit
}

custom_list() {
	while read provider primary secondary; do
		for ip in $primary $secondary; do
			printf "\e[01;32mresults from $provider [ $ip ]\e[0m\n"
			digall $ip | sed -r 's/^/\t/g'
		done
	done < <(echo -e "$nameservers")
}

auth() {
	if [[ ! -z $nslist ]]; then
		while read provider ip; do
			printf "\e[01;32mresults from $provider [ $ip ]\e[0m\n"
			digall $ip | sed -r 's/^/\t/g'
		done < <(echo -e $nslist)
	fi
}

check_exist() {
	local -n to_check="$1"
	value="$2"
    if [[ $to_check ]]; then
		return
	elif [[ ${!to_check} == "domain" ]]; then
		domain=$value
	elif [[ ${!to_check} == "record" ]]; then
		record=${value^^}
	elif [[ ${!to_check} == "which_ns" ]]; then
		which_ns="$value"
    fi
}

while (( "$#" )); do
	case ${1,,} in
		--nsinfo)
			check_exist ns_info
			ns_info=1
			;;
		-b)
			check_exist which_ns b
#			which_ns='b'
			;;
		-c)
			check_exist which_ns c
#			which_ns='c'
			;;
		-h|--help)
			how2
			;;
		soa)
			check_exist record $1
			;;
		a)
			check_exist record $1
			;;
		aaaa)
			check_exist record $1
			;;
		caa)
			check_exist record $1
			;;
		mx)
			check_exist record $1
			;;
		ns)
			check_exist record $1
			;;
		txt)
			check_exist record $1
			;;
		*.*)
			check_exist domain $1
			;;
		*)
			echo "\"$1\" is not a valid parameter"
			;;
	esac
shift
done

if [[ -z $domain ]]; then
	echo "No domain found in arguments"
	how2
fi
if [[ -z $record ]]; then
	record="SOA A AAAA CAA MX NS TXT"
fi

resolve_auth_ns

if [[ $ns_info ]]; then
	echo -e "Authoritative nameserver report for:\n\n$domain\n"
	while read provider ip; do
		echo "$provider [$ip]"
	done < <(echo -e $nslist) | column -t
	exit
fi

if [[ $which_ns == "b" ]]; then
	auth
	custom_list
elif [[ $which_ns == "c" ]]; then
	custom_list
else
	auth
fi
